buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        maven { url 'http://jcenter.bintray.com'}
        maven { url 'http://dl.bintray.com/hmrc/releases'}
        maven { url 'http://repo.spring.io/plugins-release' }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.palantir.gradle.gitversion:gradle-git-version:0.5.2"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0"
        classpath 'org.ajoberstar:gradle-git:1.6.0-rc.1'
    }
}

apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'com.palantir.git-version'
apply plugin: "com.jfrog.bintray"
apply plugin: 'maven-publish'
apply plugin: 'distribution'
apply plugin: 'propdeps'
apply plugin: 'license'

buildDir = 'target'

def zoneId = TimeZone.getTimeZone("UTC").toZoneId();
def datePattern = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"

jar {
    baseName = 'time-to-pay-arrangement'
    version = gitVersion()
    manifest {
        attributes(
                "Git-Describe" : grgit.repository.jgit.describe().call(),
                "Git-Commit-Date" : grgit.head().date.format(datePattern),
                "Git-Commit-Author" : grgit.head().committer.name,
                "Git-Repo-Is-Clean" : Boolean.toString(grgit.repository.jgit.status().call().isClean()),
                "Git-Branch" : grgit.branch.current.name,
                "Git-Head-Rev" :grgit.head().id,
                "Implementation-Title" : "time-to-pay-arrangement",
                "Build-Date" : java.time.ZonedDateTime.of(java.time.LocalDateTime.now(), zoneId).format(java.time.format.DateTimeFormatter.ofPattern(datePattern)
                        .withZone(zoneId)),
                "Implementation-Version" : version,
                "Specification-Vendor" : "uk.gov.hmrc",
                "Implementation-Vendor-Id" : "uk.gov.hmrc",
                "Specification-Version" : version
        )
    }
}

final javaVersion = 1.8

group = "uk.gov.hmrc"
version = gitVersion()

println("gradle git versioned as $version")

repositories {

    maven { url 'http://jcenter.bintray.com'}
    mavenCentral()
}

dependencies {

    optional "org.springframework.boot:spring-boot-configuration-processor"

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile group: 'commons-io', name: 'commons-io',version: '2.4'
    compile group: 'io.dropwizard.metrics', name: 'metrics-json', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-logback', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-servlet', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: '3.1.2'
    compile group: 'io.javaslang', name:'javaslang', version: '2.0.2'
    compile group: 'com.ryantenney.metrics', name:'metrics-spring', version: '3.1.3'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.8.1'

    testCompile('org.springframework.boot:spring-boot-starter-test',
            'org.spockframework:spock-core:1.0-groovy-2.4',
            'org.codehaus.groovy:groovy-all:2.4.6',
            'org.spockframework:spock-spring:1.0-groovy-2.4')
}

compileJava.dependsOn(processResources)

task tar(type: Tar, dependsOn: bootRepackage) {
    from('target/libs') {
        include '*.jar'
        into("${this.project.name}-${this.project.version}/lib")
    }
    from ('src/main/bin') {
        fileMode 0755
        into("${this.project.name}-${this.project.version}/bin")
    }
    from ('gradle-sm') {
        fileMode 0755
        into("${this.project.name}-${this.project.version}/bin")
    }
    extension = 'tgz'
    compression = Compression.GZIP
}

build.dependsOn(tar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tar
        }
    }
}

license {
    header = rootProject.file('HMRC-LICENSE')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'HM Revenue & Customs'
    include "**/*.java"
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

defaultTasks 'clean', 'licenseFormatMain', 'test'

bintray {
    user = credentialsProperty('user')
    key = credentialsProperty('password')
    publications = ['mavenJava']
    def repoName = System.properties["releases"] == null ? "release-candidates" : "releases"
    println("repo '$repoName'")
    pkg {
        repo = repoName
        name = this.project.name
        userOrg = 'hmrc'
        version {
            name = this.project.version
            vcsTag = 'None'
        }
    }
    publish = true
}

test {
    reports.junitXml.destination = 'target/test-reports'
}


private def credentialsProperty(String key) {
    def credentials = new Properties()
    def file = new File("${System.properties['user.home']}", '/.bintray/.credentials')
    if (file.exists()) {
        credentials.load(file.newDataInputStream())
    }
    credentials.get(key)
}